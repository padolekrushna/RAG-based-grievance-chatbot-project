# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U_ppqhOQ9HuO491kC9vJvbGUMZG7uZSR
"""

# RAG-based Chatbot with Complaint Creation API - Google Colab Version
# Complete implementation optimized for Google Colab environment

# =============================================================================
# STEP 1: INSTALL DEPENDENCIES
# =============================================================================
print("📦 Installing required packages...")

# Install packages one by one for better error handling
import subprocess
import sys

def install_package(package):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"✅ {package} installed successfully")
    except Exception as e:
        print(f"❌ Failed to install {package}: {e}")

# Install required packages
packages = [
    "fastapi",
    "uvicorn",
    "nest-asyncio",
    "sentence-transformers",
    "faiss-cpu",
    "PyPDF2",
    "python-multipart",
    "email-validator",
    "pyngrok",
    "requests"
]

for package in packages:
    install_package(package)

print("🎉 All packages installed!")

# =============================================================================
# STEP 2: IMPORT LIBRARIES
# =============================================================================
print("📚 Importing libraries...")

import os
import sqlite3
import json
import uuid
import re
from datetime import datetime
from typing import Dict, List, Optional, Any
import asyncio
import threading
import time

# FastAPI and web components
try:
    from fastapi import FastAPI, HTTPException
    from fastapi.middleware.cors import CORSMiddleware
    from pydantic import BaseModel, EmailStr, validator
    import uvicorn
    import nest_asyncio
    print("✅ FastAPI components imported")
except ImportError as e:
    print(f"❌ FastAPI import error: {e}")

# RAG components
try:
    import faiss
    import numpy as np
    from sentence_transformers import SentenceTransformer
    print("✅ RAG components imported")
except ImportError as e:
    print(f"❌ RAG components import error: {e}")
    print("🔄 Trying alternative installation...")
    !pip install --upgrade faiss-cpu
    import faiss
    import numpy as np
    from sentence_transformers import SentenceTransformer

# Enable nested event loops for Colab
nest_asyncio.apply()

print("🚀 All imports successful!")

# =============================================================================
# STEP 3: DATABASE SETUP
# =============================================================================

class DatabaseManager:
    def __init__(self, db_path: str = "complaints.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """Initialize the SQLite database with complaints table"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS complaints (
                complaint_id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                phone_number TEXT NOT NULL,
                email TEXT NOT NULL,
                complaint_details TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        conn.commit()
        conn.close()
        print("✅ Database initialized")

    def create_complaint(self, complaint_data: Dict) -> str:
        """Create a new complaint and return complaint ID"""
        complaint_id = f"CMP{uuid.uuid4().hex[:6].upper()}"

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO complaints (complaint_id, name, phone_number, email, complaint_details)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            complaint_id,
            complaint_data['name'],
            complaint_data['phone_number'],
            complaint_data['email'],
            complaint_data['complaint_details']
        ))

        conn.commit()
        conn.close()

        return complaint_id

    def get_complaint(self, complaint_id: str) -> Optional[Dict]:
        """Retrieve complaint by ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT complaint_id, name, phone_number, email, complaint_details, created_at
            FROM complaints WHERE complaint_id = ?
        ''', (complaint_id,))

        result = cursor.fetchone()
        conn.close()

        if result:
            return {
                "complaint_id": result[0],
                "name": result[1],
                "phone_number": result[2],
                "email": result[3],
                "complaint_details": result[4],
                "created_at": result[5]
            }
        return None

# =============================================================================
# STEP 4: RAG SYSTEM SETUP
# =============================================================================

class RAGSystem:
    def __init__(self):
        print("🧠 Initializing RAG system...")
        try:
            self.model = SentenceTransformer('all-MiniLM-L6-v2')
            print("✅ Sentence transformer model loaded")
        except Exception as e:
            print(f"❌ Error loading model: {e}")
            return

        self.knowledge_base = []
        self.embeddings = None
        self.index = None
        self.setup_knowledge_base()

    def setup_knowledge_base(self):
        """Create a sample knowledge base for customer service"""
        print("📖 Setting up knowledge base...")

        sample_knowledge = [
            "Customer Service Policy: We are committed to resolving all customer complaints within 24-48 hours. Our team works around the clock to ensure customer satisfaction.",
            "Complaint Handling Procedure: All complaints must include customer name, contact details, and detailed description of the issue. Missing information will delay processing.",
            "Delivery Issues: For delayed deliveries, we track the package and provide updates every 6 hours until resolution. Customers receive SMS and email notifications.",
            "Product Quality: Defective products can be returned within 30 days for full refund or replacement. No questions asked return policy for manufacturing defects.",
            "Refund Policy: Refunds are processed within 5-7 business days after approval. Refunds are credited to the original payment method used.",
            "Contact Information: Customer service is available 24/7 via phone, email, and chat support. Emergency line available for urgent issues.",
            "Escalation Process: Complex issues are escalated to senior management within 2 hours. Manager callback guaranteed within 4 hours.",
            "Follow-up Procedure: We follow up with customers within 48 hours after complaint resolution. Satisfaction survey sent via email.",
            "Order Tracking: Customers can track their orders using the order ID on our website. Real-time updates available through mobile app.",
            "Return Process: Items can be returned by initiating a return request through customer portal. Free pickup available for returns.",
            "Warranty Information: All products come with manufacturer warranty. Extended warranty options available at checkout.",
            "Technical Support: Free technical support available for all products. Video call support available for complex technical issues.",
            "Billing Issues: Billing disputes resolved within 24 hours. Temporary credit provided while investigation is ongoing.",
            "Account Management: Customers can manage their accounts online. Password reset and security features available 24/7.",
            "Feedback System: Customer feedback is collected and reviewed monthly. Feedback directly impacts service improvements."
        ]

        self.knowledge_base = sample_knowledge
        print(f"✅ Knowledge base created with {len(sample_knowledge)} documents")
        self.build_index()

    def build_index(self):
        """Build FAISS index for semantic search"""
        if not self.knowledge_base:
            print("❌ No knowledge base to index")
            return

        try:
            print("🔍 Building FAISS index...")
            embeddings = self.model.encode(self.knowledge_base)
            self.embeddings = np.array(embeddings).astype('float32')

            # Create FAISS index
            dimension = self.embeddings.shape[1]
            self.index = faiss.IndexFlatIP(dimension)  # Inner product similarity
            faiss.normalize_L2(self.embeddings)  # Normalize for cosine similarity
            self.index.add(self.embeddings)
            print("✅ FAISS index built successfully")
        except Exception as e:
            print(f"❌ Error building index: {e}")

    def retrieve_relevant_context(self, query: str, top_k: int = 3) -> List[str]:
        """Retrieve relevant context from knowledge base"""
        if not self.index:
            return []

        try:
            query_embedding = self.model.encode([query])
            query_embedding = np.array(query_embedding).astype('float32')
            faiss.normalize_L2(query_embedding)

            scores, indices = self.index.search(query_embedding, top_k)

            relevant_docs = []
            for idx in indices[0]:
                if idx < len(self.knowledge_base):
                    relevant_docs.append(self.knowledge_base[idx])

            return relevant_docs
        except Exception as e:
            print(f"Error in retrieval: {e}")
            return []

# =============================================================================
# STEP 5: PYDANTIC MODELS
# =============================================================================

class ComplaintCreate(BaseModel):
    name: str
    phone_number: str
    email: EmailStr
    complaint_details: str

    @validator('phone_number')
    def validate_phone(cls, v):
        # Basic phone number validation
        pattern = r'^\+?[\d\s\-\(\)]{10,15}$'
        clean_phone = v.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
        if not re.match(r'^\+?\d{10,15}$', clean_phone):
            raise ValueError('Invalid phone number format - should be 10-15 digits')
        return v

class ComplaintResponse(BaseModel):
    complaint_id: str
    message: str

class ComplaintDetails(BaseModel):
    complaint_id: str
    name: str
    phone_number: str
    email: str
    complaint_details: str
    created_at: str

# =============================================================================
# STEP 6: CHATBOT CLASS
# =============================================================================

class ComplaintChatbot:
    def __init__(self, rag_system: RAGSystem, db_manager: DatabaseManager):
        self.rag_system = rag_system
        self.db_manager = db_manager
        self.active_sessions = {}  # Store conversation sessions
        print("🤖 Chatbot initialized")

    def start_session(self, session_id: str):
        """Start a new conversation session"""
        self.active_sessions[session_id] = {
            'state': 'initial',
            'collected_data': {},
            'context': []
        }

    def process_message(self, session_id: str, message: str) -> str:
        """Process user message and return chatbot response"""
        if session_id not in self.active_sessions:
            self.start_session(session_id)

        session = self.active_sessions[session_id]
        message_lower = message.lower().strip()

        # Check if user wants to retrieve complaint details
        if 'show details' in message_lower or ('complaint' in message_lower and any(c.isalnum() for c in message)):
            complaint_id = self.extract_complaint_id(message)
            if complaint_id:
                return self.get_complaint_details(complaint_id)

        # Check if user wants to file a complaint
        complaint_keywords = ['complaint', 'issue', 'problem', 'delayed', 'defective', 'wrong', 'damaged', 'missing', 'refund', 'return']
        if any(keyword in message_lower for keyword in complaint_keywords):
            if session['state'] == 'initial':
                session['state'] = 'collecting_name'
                session['complaint_type'] = message
                return "I'm sorry to hear about your issue. I'll help you file a complaint. Please provide your name."

        # Collect information based on current state
        if session['state'] == 'collecting_name':
            session['collected_data']['name'] = message
            session['state'] = 'collecting_phone'
            return f"Thank you, {message}. What is your phone number?"

        elif session['state'] == 'collecting_phone':
            # Validate phone number
            try:
                # Clean and validate phone number
                clean_phone = message.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
                if re.match(r'^\+?\d{10,15}$', clean_phone):
                    session['collected_data']['phone_number'] = message
                    session['state'] = 'collecting_email'
                    return "Got it. Please provide your email address."
                else:
                    return "Please provide a valid phone number (10-15 digits). Example: 1234567890"
            except:
                return "Please provide a valid phone number (10-15 digits). Example: 1234567890"

        elif session['state'] == 'collecting_email':
            # Basic email validation
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if re.match(email_pattern, message):
                session['collected_data']['email'] = message
                session['state'] = 'collecting_details'
                return "Thanks. Can you share more details about your issue?"
            else:
                return "Please provide a valid email address. Example: user@example.com"

        elif session['state'] == 'collecting_details':
            session['collected_data']['complaint_details'] = message
            # Create complaint
            try:
                complaint_id = self.create_complaint(session['collected_data'])
                session['state'] = 'completed'
                return f"Your complaint has been registered with ID: {complaint_id}. You'll hear back soon."
            except Exception as e:
                return f"Sorry, there was an error creating your complaint: {str(e)}. Please try again."

        # Default response with RAG
        return self.generate_rag_response(message)

    def extract_complaint_id(self, message: str) -> Optional[str]:
        """Extract complaint ID from message"""
        # Look for pattern like CMP123ABC
        pattern = r'\bCMP[A-Z0-9]{6}\b'
        match = re.search(pattern, message.upper())
        return match.group() if match else None

    def create_complaint(self, complaint_data: Dict) -> str:
        """Create complaint via database"""
        return self.db_manager.create_complaint(complaint_data)

    def get_complaint_details(self, complaint_id: str) -> str:
        """Retrieve and format complaint details"""
        complaint = self.db_manager.get_complaint(complaint_id)
        if complaint:
            return f"""Complaint Details:
Complaint ID: {complaint['complaint_id']}
Name: {complaint['name']}
Phone: {complaint['phone_number']}
Email: {complaint['email']}
Details: {complaint['complaint_details']}
Created At: {complaint['created_at']}"""
        else:
            return f"No complaint found with ID: {complaint_id}"

    def generate_rag_response(self, query: str) -> str:
        """Generate response using RAG"""
        try:
            relevant_context = self.rag_system.retrieve_relevant_context(query)

            if relevant_context:
                # Extract key information from context
                context_text = " ".join(relevant_context[:2])  # Use top 2 contexts
                # Truncate for readability
                if len(context_text) > 300:
                    context_text = context_text[:300] + "..."

                return f"Based on our policies: {context_text}\n\nHow can I help you with your specific concern? If you'd like to file a complaint, just let me know about your issue."
            else:
                return "I understand your concern. Could you please provide more details about the issue you're facing? I'm here to help you file a complaint if needed."
        except Exception as e:
            return "I'm here to help! Please describe your issue and I'll assist you in filing a complaint."

# =============================================================================
# STEP 7: FASTAPI APPLICATION
# =============================================================================

print("🌐 Setting up FastAPI application...")

# Initialize components
try:
    db_manager = DatabaseManager()
    rag_system = RAGSystem()
    chatbot = ComplaintChatbot(rag_system, db_manager)
    print("✅ All components initialized successfully")
except Exception as e:
    print(f"❌ Error initializing components: {e}")

# Create FastAPI app
app = FastAPI(title="Complaint Management API", version="1.0.0", description="RAG-based Complaint Management System")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/complaints", response_model=ComplaintResponse)
async def create_complaint(complaint: ComplaintCreate):
    """Create a new complaint"""
    try:
        complaint_id = db_manager.create_complaint(complaint.dict())
        return ComplaintResponse(
            complaint_id=complaint_id,
            message="Complaint created successfully"
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating complaint: {str(e)}")

@app.get("/complaints/{complaint_id}", response_model=ComplaintDetails)
async def get_complaint(complaint_id: str):
    """Retrieve complaint details by ID"""
    complaint = db_manager.get_complaint(complaint_id)
    if not complaint:
        raise HTTPException(status_code=404, detail="Complaint not found")

    return ComplaintDetails(**complaint)

@app.post("/chat")
async def chat_endpoint(request: dict):
    """Chat endpoint for the chatbot"""
    try:
        session_id = request.get('session_id', 'default')
        message = request.get('message', '')

        if not message:
            return {"error": "Message cannot be empty"}

        response = chatbot.process_message(session_id, message)

        return {
            "response": response,
            "session_id": session_id,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {"error": f"Chat processing error: {str(e)}"}

@app.get("/")
async def root():
    """Root endpoint with API information"""
    return {
        "message": "RAG-based Complaint Management API is running!",
        "endpoints": {
            "POST /complaints": "Create a new complaint",
            "GET /complaints/{id}": "Get complaint details",
            "POST /chat": "Chat with the bot",
            "GET /docs": "API documentation"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "database": "connected",
        "rag_system": "loaded",
        "timestamp": datetime.now().isoformat()
    }

print("✅ FastAPI application setup complete")

# =============================================================================
# STEP 8: DEMO INTERFACE
# =============================================================================

def run_interactive_demo():
    """Run an interactive demo in the console"""
    print("\n" + "="*60)
    print("🤖 COMPLAINT CHATBOT - INTERACTIVE DEMO")
    print("="*60)
    print("Instructions:")
    print("• Describe your issue to file a complaint")
    print("• Type 'show details [COMPLAINT_ID]' to retrieve complaint")
    print("• Type 'quit' to exit")
    print("• Type 'help' for assistance")
    print("="*60)

    session_id = f"demo_{uuid.uuid4().hex[:8]}"
    print(f"Session ID: {session_id}")
    print("\nBot: Hello! I'm here to help you with complaints and customer service questions. What can I help you with today?")

    while True:
        try:
            user_input = input("\nYou: ").strip()

            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Bot: Thank you for using our complaint system. Goodbye! 👋")
                break
            elif user_input.lower() == 'help':
                print("Bot: I can help you:")
                print("1. File a complaint - just describe your issue")
                print("2. Retrieve complaint details - say 'show details [ID]'")
                print("3. Answer questions about our policies")
                continue
            elif not user_input:
                print("Bot: Please enter a message.")
                continue

            response = chatbot.process_message(session_id, user_input)
            print(f"Bot: {response}")

        except KeyboardInterrupt:
            print("\n\nBot: Session ended. Goodbye! 👋")
            break
        except Exception as e:
            print(f"Bot: Sorry, I encountered an error: {str(e)}")

def test_api_functionality():
    """Test the API functionality without running the server"""
    print("\n" + "="*50)
    print("🧪 TESTING API FUNCTIONALITY")
    print("="*50)

    # Test database operations
    print("1. Testing database operations...")

    test_complaint = {
        "name": "John Doe",
        "phone_number": "1234567890",
        "email": "john@example.com",
        "complaint_details": "My order #12345 was delayed and arrived damaged"
    }

    try:
        # Test complaint creation
        complaint_id = db_manager.create_complaint(test_complaint)
        print(f"✅ Complaint created with ID: {complaint_id}")

        # Test complaint retrieval
        retrieved = db_manager.get_complaint(complaint_id)
        if retrieved:
            print("✅ Complaint retrieved successfully")
            print(f"   Name: {retrieved['name']}")
            print(f"   Email: {retrieved['email']}")
        else:
            print("❌ Failed to retrieve complaint")

    except Exception as e:
        print(f"❌ Database test failed: {e}")

    # Test RAG system
    print("\n2. Testing RAG system...")
    try:
        query = "What is your refund policy?"
        context = rag_system.retrieve_relevant_context(query)
        if context:
            print("✅ RAG retrieval working")
            print(f"   Retrieved {len(context)} relevant documents")
        else:
            print("❌ RAG retrieval failed")
    except Exception as e:
        print(f"❌ RAG test failed: {e}")

    # Test chatbot
    print("\n3. Testing chatbot functionality...")
    try:
        test_session = "test_session"
        response = chatbot.process_message(test_session, "I have a complaint about delayed delivery")
        print("✅ Chatbot responding correctly")
        print(f"   Response: {response[:100]}...")
    except Exception as e:
        print(f"❌ Chatbot test failed: {e}")

def run_server():
    """Run the FastAPI server"""
    print("\n" + "="*50)
    print("🌐 STARTING FASTAPI SERVER")
    print("="*50)
    print("Server will be available at:")
    print("• Local: http://localhost:8000")
    print("• API Documentation: http://localhost:8000/docs")
    print("• Health Check: http://localhost:8000/health")
    print("\nPress Ctrl+C to stop the server")
    print("="*50)

    try:
        uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
    except KeyboardInterrupt:
        print("\n🛑 Server stopped by user")
    except Exception as e:
        print(f"❌ Server error: {e}")

# =============================================================================
# STEP 9: MAIN EXECUTION
# =============================================================================

def main():
    """Main function with menu system"""
    print("\n" + "🎯"*20)
    print("RAG-BASED COMPLAINT CHATBOT SYSTEM")
    print("🎯"*20)

    print("\n📋 Choose what you'd like to do:")
    print("1️⃣  Run Interactive Demo (Recommended)")
    print("2️⃣  Test API Functionality")
    print("3️⃣  Start FastAPI Server")
    print("4️⃣  Show System Information")

    while True:
        try:
            choice = input("\n👆 Enter your choice (1-4): ").strip()

            if choice == "1":
                run_interactive_demo()
                break
            elif choice == "2":
                test_api_functionality()
                break
            elif choice == "3":
                run_server()
                break
            elif choice == "4":
                print(f"\n📊 SYSTEM INFORMATION:")
                print(f"Database: {db_manager.db_path}")
                print(f"Knowledge Base: {len(rag_system.knowledge_base)} documents")
                print(f"RAG Model: {rag_system.model}")
                print(f"FastAPI: {app.title} v{app.version}")
                continue
            else:
                print("❌ Invalid choice. Please enter 1, 2, 3, or 4.")
                continue

        except KeyboardInterrupt:
            print("\n\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")
            break

# Auto-run the main function
if __name__ == "__main__":
    main()
else:
    # If imported as module, just show ready message
    print("✅ RAG Complaint Chatbot System Ready!")
    print("💡 Call main() to start the interactive menu")

# For immediate execution in Colab
print("\n🚀 System initialized successfully!")
print("💡 The system is ready to use. Choose an option from the menu above.")

main()

